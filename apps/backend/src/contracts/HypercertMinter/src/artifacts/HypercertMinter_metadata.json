{
	"compiler": {
		"version": "0.8.16+commit.07a7930e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AlreadyClaimed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ArraySize",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DoesNotExist",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DuplicateEntry",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Invalid",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotAllowed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotApprovedOrOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransfersNotAllowed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TypeMismatch",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "previousAdmin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "AdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "root",
						"type": "bytes32"
					}
				],
				"name": "AllowlistCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "claimIDs",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "fromTokenIDs",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "toTokenIDs",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "BatchValueTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "beacon",
						"type": "address"
					}
				],
				"name": "BeaconUpgraded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "claimID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "uri",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalUnits",
						"type": "uint256"
					}
				],
				"name": "ClaimStored",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "version",
						"type": "uint8"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "leaf",
						"type": "bytes32"
					}
				],
				"name": "LeafClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "TransferBatch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "TransferSingle",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "value",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "URI",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "Upgraded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "claimID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fromTokenID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "toTokenID",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "ValueTransfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "__SemiFungible1155_init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "accounts",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					}
				],
				"name": "balanceOfBatch",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32[][]",
						"name": "proofs",
						"type": "bytes32[][]"
					},
					{
						"internalType": "uint256[]",
						"name": "claimIDs",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "units",
						"type": "uint256[]"
					}
				],
				"name": "batchMintClaimsFromAllowlists",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "burnBatch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenID",
						"type": "uint256"
					}
				],
				"name": "burnFraction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "units",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "merkleRoot",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					},
					{
						"internalType": "enum IHypercertToken.TransferRestrictions",
						"name": "restrictions",
						"type": "uint8"
					}
				],
				"name": "createAllowlist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "hasBeenClaimed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "proof",
						"type": "bytes32[]"
					},
					{
						"internalType": "uint256",
						"name": "claimID",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "leaf",
						"type": "bytes32"
					}
				],
				"name": "isAllowedToClaim",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isAllowed",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_fractionIDs",
						"type": "uint256[]"
					}
				],
				"name": "mergeFractions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "units",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					},
					{
						"internalType": "enum IHypercertToken.TransferRestrictions",
						"name": "restrictions",
						"type": "uint8"
					}
				],
				"name": "mintClaim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "proof",
						"type": "bytes32[]"
					},
					{
						"internalType": "uint256",
						"name": "claimID",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "units",
						"type": "uint256"
					}
				],
				"name": "mintClaimFromAllowlist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "units",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "fractions",
						"type": "uint256[]"
					},
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					},
					{
						"internalType": "enum IHypercertToken.TransferRestrictions",
						"name": "restrictions",
						"type": "uint8"
					}
				],
				"name": "mintClaimWithFractions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proxiableUUID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					}
				],
				"name": "readTransferRestriction",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeBatchTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenID",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "_newFractions",
						"type": "uint256[]"
					}
				],
				"name": "splitFraction",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					}
				],
				"name": "unitsOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "units",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					}
				],
				"name": "unitsOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "units",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					}
				],
				"name": "upgradeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeToAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenID",
						"type": "uint256"
					}
				],
				"name": "uri",
				"outputs": [
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "bitbeckers",
			"details": "Wrapper contract to expose and chain functions.",
			"kind": "dev",
			"methods": {
				"__SemiFungible1155_init()": {
					"details": "see { openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol }"
				},
				"balanceOf(address,uint256)": {
					"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
				},
				"balanceOfBatch(address[],uint256[])": {
					"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
				},
				"batchMintClaimsFromAllowlists(address,bytes32[][],uint256[],uint256[])": {
					"details": "Calls AllowlistMinter to verify `proofs`.Mints the `amount` of units for the hypercert stored under `claimIDs`"
				},
				"burnFraction(address,uint256)": {
					"details": "see {IHypercertToken}"
				},
				"constructor": {
					"custom:oz-upgrades-unsafe-allow": "constructor",
					"details": "see { openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol }"
				},
				"createAllowlist(address,uint256,bytes32,string,uint8)": {
					"details": "Calls SemiFungible1155 to store the claim referenced in `uri` with amount of `units`Calls AllowlistMinter to store the `merkleRoot` as proof to authorize claims"
				},
				"initialize()": {
					"details": "see { openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol }"
				},
				"isApprovedForAll(address,address)": {
					"details": "See {IERC1155-isApprovedForAll}."
				},
				"mergeFractions(address,uint256[])": {
					"details": "see {IHypercertToken}"
				},
				"mintClaim(address,uint256,string,uint8)": {
					"details": "see {IHypercertToken}"
				},
				"mintClaimFromAllowlist(address,bytes32[],uint256,uint256)": {
					"details": "Calls AllowlistMinter to verify `proof`.Mints the `amount` of units for the hypercert stored under `claimID`"
				},
				"mintClaimWithFractions(address,uint256,uint256[],string,uint8)": {
					"details": "see {IHypercertToken}"
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"proxiableUUID()": {
					"details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
					"details": "See {IERC1155-safeBatchTransferFrom}."
				},
				"safeTransferFrom(address,address,uint256,uint256,bytes)": {
					"details": "See {IERC1155-safeTransferFrom}."
				},
				"setApprovalForAll(address,bool)": {
					"details": "See {IERC1155-setApprovalForAll}."
				},
				"splitFraction(address,uint256,uint256[])": {
					"details": "see {IHypercertToken}"
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unitsOf(address,uint256)": {
					"details": "see {IHypercertToken}"
				},
				"unitsOf(uint256)": {
					"details": "see {IHypercertToken}"
				},
				"upgradeTo(address)": {
					"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				},
				"upgradeToAndCall(address,bytes)": {
					"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				},
				"uri(uint256)": {
					"details": "see { IHypercertMetadata}"
				}
			},
			"stateVariables": {
				"__gap": {
					"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps Assuming 30 available slots (slots cost space, cost gas) 1. typeRestrictions"
				},
				"typeRestrictions": {
					"details": "from typeID to a transfer policy"
				}
			},
			"title": "Contract for managing hypercert claims and whitelists",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"batchMintClaimsFromAllowlists(address,bytes32[][],uint256[],uint256[])": {
					"notice": "Mint semi-fungible tokens representing a fraction of the claims in `claimIDs`"
				},
				"burnFraction(address,uint256)": {
					"notice": "Burn a claimtoken"
				},
				"createAllowlist(address,uint256,bytes32,string,uint8)": {
					"notice": "Register a claim and the whitelist for minting token(s) belonging to that claim"
				},
				"mergeFractions(address,uint256[])": {
					"notice": "Merge the value of tokens belonging to the same claim"
				},
				"mintClaim(address,uint256,string,uint8)": {
					"notice": "Mint a semi-fungible token for the impact claim referenced via `uri`"
				},
				"mintClaimFromAllowlist(address,bytes32[],uint256,uint256)": {
					"notice": "Mint a semi-fungible token representing a fraction of the claim"
				},
				"mintClaimWithFractions(address,uint256,uint256[],string,uint8)": {
					"notice": "Mint semi-fungible tokens for the impact claim referenced via `uri`"
				},
				"ownerOf(uint256)": {
					"notice": "READ"
				},
				"pause()": {
					"notice": "PAUSABLE"
				},
				"readTransferRestriction(uint256)": {
					"notice": "TRANSFER RESTRICTIONS"
				},
				"splitFraction(address,uint256,uint256[])": {
					"notice": "Split a claimtokens value into parts with summed value equal to the original"
				}
			},
			"notice": "Implementation of the HypercertTokenInterface using { SemiFungible1155 } as underlying token.This contract supports whitelisted minting via { AllowlistMinter }.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"HypercertMinter/src/HypercertMinter.sol": "HypercertMinter"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"HypercertMinter/src/AllowlistMinter.sol": {
			"keccak256": "0x23b3c3e29f98d391e16dfd4b018f47094363c4b53502ac3c1917d1b9ede8b0eb",
			"license": "MIT",
			"urls": [
				"bzz-raw://dc1a297017806dad49c952d380ee47d71e173e7a49a6cee89916059c29c6dc64",
				"dweb:/ipfs/QmbNnDryktnM3wEH1KELKEAxxNpXXx5sbzVGguWECtLLbS"
			]
		},
		"HypercertMinter/src/HypercertMinter.sol": {
			"keccak256": "0xde88df0272a51630f514f71ccae1da2951f10453bd5041011a25d8fdda08a242",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6e21ed24a80a1629ac05ebf2d5b0adc49a2e17ce292346cc480e99b3731c110",
				"dweb:/ipfs/QmULU3kFiqXb5AvGtf9AsUstincPfjx27pFggUyBFJ6Bew"
			]
		},
		"HypercertMinter/src/SemiFungible1155.sol": {
			"keccak256": "0x0efcc965876023d1ecf3788df2836ab7b0fd8f17bea77192e11d5850706c6097",
			"license": "MIT",
			"urls": [
				"bzz-raw://d1374af57568b1b6f868ab49fbadd1881e500cab07ec3dd72bec74ae63199ab3",
				"dweb:/ipfs/QmYyHhseJzdNNqkuEUYjXv3QVjQvH8pXE9ya8d1XpmsEc2"
			]
		},
		"HypercertMinter/src/interfaces/IAllowlist.sol": {
			"keccak256": "0x8a635774816da81c978272473f301d6b7c4356160bb14ca875c39f78a100e365",
			"license": "MIT",
			"urls": [
				"bzz-raw://f76b92188cc3d1edc7fffd44af18147648be97bb37fee06b1422b4afba389e60",
				"dweb:/ipfs/QmfSX7Aj4nh3Bdrq6NTh98DnvWuDvvQMaHoSFbPDkmsa4y"
			]
		},
		"HypercertMinter/src/interfaces/IHypercertToken.sol": {
			"keccak256": "0xeea0dcb94c90564c87dc9b8eca52eecc955d37953c0a6724f8f94c1a514bf76a",
			"license": "MIT",
			"urls": [
				"bzz-raw://5b61a1a75c422913adc44ae081168c82df1a98ab0334269c74e051007bf64682",
				"dweb:/ipfs/QmXEYrtuyMMoN4Sr8pSDVqpzHG1Gg9UXgyRu1Jy2Z32SwM"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
			"keccak256": "0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888",
			"license": "MIT",
			"urls": [
				"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a",
				"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol": {
			"keccak256": "0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f",
			"license": "MIT",
			"urls": [
				"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053",
				"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
			"keccak256": "0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823",
			"license": "MIT",
			"urls": [
				"bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2",
				"dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol": {
			"keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
			"license": "MIT",
			"urls": [
				"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1",
				"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
			"keccak256": "0xedc5eaa54866c6d0e8960d9fe8ea6f9052ba28686907f6886f83dfba41fa1549",
			"license": "MIT",
			"urls": [
				"bzz-raw://0b296244e62d13e87d8272c574fb58c22af02b262d74d7a8f642753522351bb0",
				"dweb:/ipfs/Qmcd3MfBWRE8EQt67AqgGGHviNum5aQ7JE7manH5nNtx4o"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
			"keccak256": "0xcf6837f68b5376c07f7b5130dc8de39f00f357f119113a82a15229bf2b96fdc5",
			"license": "MIT",
			"urls": [
				"bzz-raw://6be1e3e05f79a714c08a446a994dba2939203092d7aa97302d7b2ab157b437fb",
				"dweb:/ipfs/QmdgBbHNijVgApRQ9UM17qds6QdhTgXxKHUoLAswA6VNyH"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/security/PausableUpgradeable.sol": {
			"keccak256": "0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250",
			"license": "MIT",
			"urls": [
				"bzz-raw://9c7d1f5e15633ab912b74c2f57e24559e66b03232300d4b27ff0f25bc452ecad",
				"dweb:/ipfs/QmYTJkc1cntYkKQ1Tu11nBcJLakiy93Tjytc4XHELo4GmR"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/ERC1155Upgradeable.sol": {
			"keccak256": "0x781168693f2016172924e327a142f7a87b037d63b6c613d02d3f62bcd96658a4",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0af02441cd02c82483d909febd9f36af6104866c260a3a9046b263fe82bdf10",
				"dweb:/ipfs/QmbEWucxnEDmgWuPksGxMETufBVWYisXGFsZzGsU1MADV3"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
			"keccak256": "0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b",
			"license": "MIT",
			"urls": [
				"bzz-raw://4a4da6e241d1d8c2ef214c311e02c749f45b5e0dd8168c667bc8ee6f67dcf4ce",
				"dweb:/ipfs/QmdsKj5frsNS7ZCfJBm4XNfy6MueV9udBF2FiBxVXwxybG"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/IERC1155Upgradeable.sol": {
			"keccak256": "0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe",
			"license": "MIT",
			"urls": [
				"bzz-raw://e037192cadfd20ad0f1b0c54a0c770a1ba551e7d0fcb6d3708e5ba352f88ded2",
				"dweb:/ipfs/QmTXwY6odV1ToDZAYxbbLKThe9M5PUWTmWBjwT776hH4qm"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol": {
			"keccak256": "0xd54dc8a16eafd8e16cba5a346a9208181aa733d6927697a197d796915e850530",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ab9b933872ea28d036149ce2b5b7fdf180e9a5914f4afae1cfbd2e2dd8d5aad",
				"dweb:/ipfs/QmezRn4QGGaBt7VU6vDya4bxRScCzLdzWQZLBgLjHKfNZt"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol": {
			"keccak256": "0x9a1218747a17239e2fcab2efc14099379387f114c7ad22c69a23b7d67ec0eaa2",
			"license": "MIT",
			"urls": [
				"bzz-raw://eec66b0f255e61101cc9921a6499e23799ffc21ff861f5fce44a5adf9dd5ed27",
				"dweb:/ipfs/Qmckcr6QfTeoSh4t1uLNYHQYPKJhQV6NysSQLGBMGw3E3R"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
			"keccak256": "0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448",
			"license": "MIT",
			"urls": [
				"bzz-raw://1870980d15f9003916faf2a9a0eac6dcd4f0e28e2af6f5a3cee0cd685d460ee9",
				"dweb:/ipfs/QmY8K1YZQmuL2WDTPC8QwCm3ztrUD7JKmnvoZkMyGZceiM"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
			"keccak256": "0x0a3b4afc301241e2629ad192fa02e0f8626e3cf38ab6f45342bfd7afbde16ee0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b189423f1102ff4487e9c59a65ec400b98cc4aeef478dac8272b482e9f5ad7de",
				"dweb:/ipfs/QmdpYHrzD8wPe5DMuEiWkXiVLsTkqD7C4tbBjWwkBQwJi2"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
			"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
				"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol": {
			"keccak256": "0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a",
			"license": "MIT",
			"urls": [
				"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3",
				"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol": {
			"keccak256": "0x0c2ac2e8ea31517e8a807e6fe8a3cf6de47ae76a5e8ed8ca60a209efa12aab69",
			"license": "MIT",
			"urls": [
				"bzz-raw://88334f7a744ce234f624320e485c23ecdcc1a1cbb62d3251d495c0776cf465f3",
				"dweb:/ipfs/QmX15xCk4dLM6dL3JVzQZ3t47H3nahccWaSZosEN8vKzQw"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/MerkleProofUpgradeable.sol": {
			"keccak256": "0xd1c97689b13abdad32f8e3de5bd2e8cc6f25d318f0f121052c2b25b156526926",
			"license": "MIT",
			"urls": [
				"bzz-raw://4844f27e3c9c804d0d0c09aba1efc0fa7202102c5dd202b35c3cfdcb34d14cb2",
				"dweb:/ipfs/QmPcCNHSED8P2QJiaQwhAhYuLS1vK9uF2Ej4goNqp9v2DU"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
			"keccak256": "0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a",
			"license": "MIT",
			"urls": [
				"bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7",
				"dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
			"keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
			"license": "MIT",
			"urls": [
				"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
				"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
			]
		},
		"HypercertMinter/src/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol": {
			"keccak256": "0xb49137b771712774960cca0acf428499e2aa85f179fe03712e5c06c5a6ab6316",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec66760482c33d84dda577e3a7a4b81000a92e37cae5c8b55339e2d83abfce03",
				"dweb:/ipfs/QmVDSFsp9dnW8P92Yrq2jAjr9piKke8gjuZX5QjtFuZRfx"
			]
		},
		"HypercertMinter/src/libs/Errors.sol": {
			"keccak256": "0x6b2c5895a9b5af804e0dcfb8dc61a4d512f33cebbe1b151df772fbbf875b6ae4",
			"license": "MIT",
			"urls": [
				"bzz-raw://09faa0b4df5014f866be89e5163b7288952bbf08f780d683b0fd7bd9d674d809",
				"dweb:/ipfs/QmSHK99VBM5XLBeKMEL6pHTm6L9mc2MfcPY5p7DVuT68XE"
			]
		}
	},
	"version": 1
}